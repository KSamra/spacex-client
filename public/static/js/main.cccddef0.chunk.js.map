{"version":3,"sources":["logo.jpg","components/Launches/LaunchItem/LaunchItem.js","components/Launches/MissionKey/MissionKey.js","components/Launches/Launches.js","components/Launches/LaunchDetails/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cccddef0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e8e97343.jpg\";","import React from 'react';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst LaunchItem = ({launch: {flight_number, mission_name, launch_date_local, launch_success}}) => {\n  \n  //text-success and text-danger are CSS classes that are part of the Cyborg bootstrap theme \n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4> Mission: \n            <span className={launch_success ? 'text-success': 'text-danger'}>\n               {mission_name}\n            </span>\n          </h4>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\"> Launch Details </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default LaunchItem;","import React from 'react';\n\nconst MissionKey = () => {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n\n    </div>\n  )\n}\n\nexport default MissionKey;","import React, {Component, Fragment} from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem/LaunchItem';\nimport MissionKey from './MissionKey/MissionKey';\n\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery{\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nclass Launches extends Component {\n  render(){\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\" > Launches </h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {\n            ({ loading, error, data }) => {\n              if (loading) return <h4>Loading...</h4>\n              if (error) console.log(error)\n              \n              return <Fragment>\n                {\n                  data.launches.map(launch => {\n                    return <LaunchItem key={launch.flight_number} launch={launch}/>\n                  })\n                }\n              </Fragment>\n            }\n          }\n        </Query>\n      </Fragment>\n    )\n  }\n};\nexport default Launches;","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nclass Launch extends Component {\n  render(){\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    console.log('The flight number is : ', flight_number)\n\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n          {\n            ({loading, error, data}) => {\n              if (loading) return <h4>Loading...</h4>\n              if (error) console.log(error)\n\n              const { mission_name, flight_number, launch_year, launch_success, rocket: {\n                rocket_id, rocket_name, rocket_type\n              }} = data.launch;\n\n              return <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\"> Mission: </span>\n                  {mission_name}\n                </h1>\n                <h4 className=\"mb-3\"> Launch Details </h4>\n                <ul className=\"list-group\" > \n                  <li className=\"list-group-item\"> Flight Number: {flight_number} </li>\n                  <li className=\"list-group-item\"> Launch Year: {launch_year} </li>\n                  <li className=\"list-group-item\"> Launch Successful: <span className={launch_success ? \"text-success\" : \"text-danger\"}>{launch_success ? \"Yes\" : \"No\"} </span> </li>\n                </ul>\n\n                <h4 className=\"my-3\"> Rocket Details </h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\"> Rocket ID: {rocket_id} </li>\n                  <li className=\"list-group-item\"> Rocket Name: {rocket_name} </li>\n                  <li className=\"list-group-item\"> Rocket Type: {rocket_type} </li>\n                </ul>\n\n                <hr/>\n                <Link to=\"/\" className=\"btn btn-secondary\"> Back </Link>\n              </div>\n            }\n          }\n\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launch","import React, {Component} from 'react';\nimport logo from './logo.jpg';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Launches from './components/Launches/Launches';\nimport Launch from './components/Launches/LaunchDetails/Launch';\nconst client = new ApolloClient({\n  // For local development, switch the uri back to localhost\n  uri: '/graphql'\n})\n\n\nclass App extends Component{\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} \n            alt=\"SpaceX\" \n            style={{width: 300, display: 'block', margin: 'auto'}}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n      </ApolloProvider>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}